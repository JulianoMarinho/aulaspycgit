# Crie uma lista com 5 n√∫meros inteiros digitados pelo usu√°rio e exiba a soma desses n√∫meros.

# Aqui teria 2 formas de receber um valor, com map e com la√ßo.

# Com map

# numeros = list(map(int, input("Digite os numeros separados por espa√ßo:").split()))

# Com um la√ßo:

# numeros = []

# for i in range(3):
#     numero = int(input("Digite um n√∫mero:"))
#     numeros.append(numero)
  
# print(numeros)

# pra somar:

# numeros = list(map(int, input("Digite os numeros separados por espa√ßo: ").split()))

# soma = sum(numeros)

# print(f"A soma dos n√∫meros √©: {soma}")

# Pe√ßa 10 n√∫meros e armazene apenas os pares em uma nova lista. Depois, exiba essa nova lista.

# Forma simples:
# pares = []
# for i in range(10):
#     numero = int(input(f"Digite o {i}¬∫ numero:"))
#     if numero % 2 == 0:
#         pares.append(numero)

# print(pares)

# Com compreens√£o de listas:

# numeros = [int(input(f"Digite o {i + 1}¬∫ n√∫mero: ")) for i in range(10)]

# pares = [numero for numero in numeros if numero % 2 == 0]

# print(pares)

# Pe√ßa 5 nomes ao usu√°rio, armazene em uma lista, e depois mostre essa lista em ordem inversa.

# nomes = [input(f"Digite o {i + 1}¬∫ nome:") for i in range(5)]
# nomes.reverse()
# print(f"A lista de nomes invertida √©: {nomes}")

# Pe√ßa ao usu√°rio para digitar nomes at√© digitar "sair". 
# Remova todos os nomes que come√ßarem com a letra "A" e imprima a lista resultante.

# nomes = []

# while True:
#     nome = input("Digite um nome ou digite sair para sair:")
#     if nome == 'sair':
#         break
#     else:
#         nomes.append(nome)

# # remover nomes que come√ßam com 'A' ou 'a'

# nomes_filtrados = [nome for nome in nomes if not nome.startswith(('A', 'a'))]

# print(nomes_filtrados)

# Exerc√≠cios com Compreens√£o de Lista

# Crie uma lista com os quadrados dos n√∫meros de 1 a 10 usando compreens√£o de lista.

# numeros = [1,2,3,4,5,6,7,8,9,10]

# def numeros_quadrados(numero):
#     return numero ** 2

# quadrados = [numeros_quadrados(numero) for numero in numeros]

# print(f"Lista com os n√∫meros elevados ao quadrado: {quadrados}")

# Sugest√£o para lista dos quadrados:

#quadrados = [n ** 2 for n in range(1, 11)]
#print(quadrados)

# Dada a lista numeros = [1, 4, 6, 9, 2, 8], use compreens√£o de lista para criar uma nova lista apenas com os n√∫meros maiores que 5

# numeros = [1, 4, 6, 9, 2, 8]

# maiores_que_5 = [numero for numero in numeros if numero > 5]

# print(maiores_que_5)

# Pe√ßa uma frase ao usu√°rio e use compreens√£o de lista para criar uma lista com todas as palavras que tenham mais de 3 letras.

# frase = input("Digite uma frase:")

# palavras = frase.split()

# palavras_maiores = [palavra for palavra in palavras if len(palavra) > 3]

# print(palavras_maiores)

# ============================= EXTRAS ===============================

## Crie uma lista com os quadrados dos n√∫meros √≠mpares de 1 a 20 usando compreens√£o de lista.

# impares = [numero ** 2 for numero in range(1,20) if numero % 2 != 0]

# print(impares)

## Filtrar strings: Dada a lista abaixo:

# nomes = ["Ana", "Bruno", "Amanda", "Carlos", "alberto", "Beatriz"]

# Use compreens√£o de lista para criar uma nova lista apenas com os nomes que n√£o come√ßam com "A" ou "a".

# nomesA = [nome for nome in nomes if not nome.startswith(('A','a'))]

# # nomes_filtrados = [nome for nome in nomes if not nome.startswith(('A', 'a'))]
# print(nomesA)

# Palavras curtas: Pe√ßa ao usu√°rio uma frase e use compreens√£o de lista para criar uma lista 
# com todas as palavras com 3 letras ou menos.

# frase = input("Digite uma Frase:")

# palavras = frase.split()

# palavras_menores = [palavra for palavra in palavras if len(palavra) <= 3]

# print(palavras_menores)

## Tamanhos de palavras: Pe√ßa ao usu√°rio uma frase. Gere uma lista com o comprimento de 
# cada palavra digitada (ex: "Oi tudo bem" ‚Üí [2, 4, 3]).

# frase = input("Digite uma Frase:")

# palavras = frase.split() 

# palavras_numeros = [len(palavra) for palavra in palavras]

# print(palavras_numeros)

## N√∫meros pares em lista aninhada : Dada a lista de listas: listas = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# Crie uma √∫nica lista com todos os n√∫meros pares usando compreens√£o de lista.

# lista aninhada √© uma lista dentro de outra lista, para percorrer tem que fazer 2 fors

# listas = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# pares = [numero for sublista in listas  for numero in sublista if numero % 2 == 0]

# print(pares)

# Lista de booleanos:  Pe√ßa 5 n√∫meros ao usu√°rio e crie uma lista de True ou False indicando se cada n√∫mero √© maior que 10.

# numeros = [int(input(f"Digite o {i + 1}¬∫ numero:")) for i in range(0,5)]

# verifica_par = [numero > 10 for numero in numeros]

# print(verifica_par)

## Duplicar vogais: Pe√ßa ao usu√°rio uma palavra. Crie uma nova string em que todas as vogais sejam duplicadas. 
# Exemplo: casa ‚Üí caasaa.

# palavra = input("Digite uma palavra:")

# duplica_vogais = [letra * 2 if letra in 'aeiouAEIOU' else letra for letra in palavra]

# nova_palavra = ''.join(duplica_vogais)

# print(nova_palavra)

#O m√©todo .join() transforma uma lista de strings em uma √∫nica string. Ele junta todos os elementos 
# da lista, usando como separador o que estiver antes do .join().
# Funciona apenas com listas de strings, ent√£o se voc√™ tentar usar com n√∫meros, 
# d√° erro ‚Äî a menos que converta para string antes.

## USO DO JOIN

# Pe√ßa ao usu√°rio uma frase e transforme-a em uma lista de palavras. Depois, junte 
# essa lista novamente em uma string com um h√≠fen (-) entre as palavras.

# frase = input("Digite uma frase: ")

# palavras = frase.split()

# com_hifen = '-'.join(palavras)

# print(com_hifen)

# Receba uma palavra do usu√°rio e retorne a palavra com cada letra separada por um espa√ßo.
# Exemplo:
# Entrada: python
# Sa√≠da: p y t h o n

# palavra = input("Digite uma palavra: ")

# print(' '.join(palavra))


# Pe√ßa uma frase ao usu√°rio. Remova todas as vogais e junte o restante com .join() para formar uma nova string.

# frase = "Ola mundo"

# letras = [letra for letra in frase if letra not in 'AaEeIiOoUu']

# print(letras)

# Pe√ßa ao usu√°rio uma frase e inverta a ordem das palavras, mantendo as palavras originais intactas.

# Exemplo:
# Entrada: hoje √© um dia lindo
# Sa√≠da: lindo dia um √© hoje

# frase = "hoje √© um dia lindo"

# palavras = frase.split()
# palavras.reverse()

# saida = ' '.join(palavras) # Junta a lista
# print(saida)

# Pe√ßa uma palavra e exiba todas as letras separadas por -.

# Exemplo:
# Entrada: casa
# Sa√≠da: c-a-s-a

# palavra = input("Digite uma palavra: ")

# saida = '-'.join(palavra)

# print(saida)

# üîπ Exerc√≠cio 3 ‚Äî Juntar palavras com v√≠rgula
# Pe√ßa ao usu√°rio uma frase e exiba todas as palavras separadas por v√≠rgula e espa√ßo.

# Exemplo:
# Entrada: amo programar em Python
# Sa√≠da: amo, programar, em, Python

# entrada = "amo programar em Python"
# palavras = entrada.split()
# saida = ', '.join(palavras)

# print(saida)

# üîπ Exerc√≠cio 4 ‚Äî Substituir espa√ßos por underline
# Pe√ßa uma frase e retorne com os espa√ßos substitu√≠dos por _.

# Exemplo:
# Entrada: isso √© muito legal
# Sa√≠da: isso_√©_muito_legal

# entrada = "isso √© muito legal"
# palavras = entrada.split()
# saida = '_'.join(palavras)

# print(saida)

# üîπ Exerc√≠cio 5 ‚Äî Somente primeiras letras
# Pe√ßa ao usu√°rio uma frase e mostre apenas a primeira letra de cada palavra, separadas por . (ponto).

# Exemplo:
# Entrada: Python √© incr√≠vel
# Sa√≠da: P.√©.i

# entrada = "Python √© incr√≠vel"

# palavras = entrada.split()

# print('.'.join([palavra[0] for palavra in palavras]))


